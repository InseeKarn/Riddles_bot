name: Daily Bot

on:
  schedule:
      - cron: "0 3,7,11,15,19,23 * * *"  # ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å 4 ‡∏ä‡∏°. ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
      # - cron: "0 3 * * *"    # 10:00 ‡πÑ‡∏ó‡∏¢
      # - cron: "0 7 * * *"    # 14:00 ‡πÑ‡∏ó‡∏¢
      # - cron: "0 17 * * *"   # 06:00 ‡πÑ‡∏ó‡∏¢
      # - cron: "0 23 * * *"   # 00:00 ‡πÑ‡∏ó‡∏¢   # 06:00 ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ (23:00 UTC)
  workflow_dispatch:      # ‡∏£‡∏±‡∏ô‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö

jobs:
  run-bot:
    runs-on: ubuntu-latest
    env:
      YT_API: ${{ secrets.YT_API }}
      YT_PRIVACY: ${{ secrets.YT_PRIVACY }}
      YT_CATEGORY: ${{ secrets.YT_CATEGORY }}
      DIS_AUTH: ${{ secrets.DIS_AUTH }}
      UNS_ACCESS: ${{ secrets.UNS_ACCESS }}
      UNS_SECRET: ${{ secrets.UNS_SECRET }}
      UNS_APPID: ${{ secrets.UNS_APPID }}
      PIXA_API: ${{ secrets.PIXA_API }}
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      HAS_CRED: ${{ secrets.YT_CREDENTIALS != '' }}
      HAS_TOKEN: ${{ secrets.TOKEN_JSON != '' }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: pip install -r requirements.txt

    # ‚úÖ ‡∏î‡∏∂‡∏á state
    - name: Restore state files
      uses: actions/download-artifact@v4
      with:
        name: state-files
        path: .
      continue-on-error: true

    # ‚úÖ ‡πÑ‡∏ü‡∏•‡πå‡∏ß‡πà‡∏≤‡∏á
    - name: Create empty state files if missing
      run: |
        [ -f downloaded_not_edited.json ] || echo "[]" > downloaded_not_edited.json
        [ -f pixabay_blocked.json ] || echo "[]" > pixabay_blocked.json
        [ -f token.json ] || echo "{}" > token.json
        [ -f pixabay_seen.json ] || echo "[]" > pixabay_seen.json
    
      # üõë ‡πÄ‡∏ä‡πá‡∏Å block ‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô (‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô cron ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö 24 ‡∏ä‡∏°.)
    - name: Check upload block
      run: |
        if [ "${{ github.event_name }}" = "schedule" ] && [ -f upload_block_until.txt ]; then
          until_ts=$(cat upload_block_until.txt)
          now_ts=$(date +%s)
          if [ "$now_ts" -lt "$until_ts" ]; then
            echo "‚è≥ ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô"
            exit 0
          fi
        fi

  
    # ‚úÖ credentials.json (‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏°‡∏µ secret)
    - name: Create credentials.json
      if: ${{ env.HAS_CRED }}
      run: printf '%s' '${{ secrets.YT_CREDENTIALS }}' > credentials.json

    # ‚úÖ token.json (‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏°‡∏µ secret)
    - name: Create token.json
      if: ${{ env.HAS_TOKEN }}
      run: printf '%s' '${{ secrets.TOKEN_JSON }}' > token.json

    # ‚úÖ Validate JSON
    - name: Validate JSON files
      run: |
        python -m json.tool credentials.json > /dev/null
        python -m json.tool token.json > /dev/null

    - name: Run script and set block if limit hit
      run: |
        set -e
        python main.py 2>&1 | tee run.log || true

        if grep -q "uploadLimitExceeded" run.log; then
          echo "Found YouTube upload limit ‚Üí Block 24 hr."
          date -u +"%Y-%m-%d %H:%M:%S UTC"
          echo $(( $(date +%s) + 86400 )) > upload_block_until.txt
          exit 0
          
          # Notify Discord
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"‚ö†Ô∏è Upload Limit Detected ‚Äî Blocked until $(date -d '+24 hours' '+%Y-%m-%d %H:%M:%S %Z')\"}" \
               "$DISCORD_WEBHOOK_URL"
        fi

    # ‚úÖ Save state
    - name: Save initial state files
      uses: actions/upload-artifact@v4
      with:
        name: state-files
        path: |
          downloaded_not_edited.json
          pixabay_blocked.json
          token.json
          pixabay_seen.json
          pixabay_blocked.json
          token.json
          pixabay_seen.json
